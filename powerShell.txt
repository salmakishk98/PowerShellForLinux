#include<stdio.h> 
#include<string.h> 
#include<stdlib.h> 
#include<unistd.h> 
#include<sys/types.h> 
#include<sys/wait.h> 
#include<fcntl.h>
#include<readline/readline.h> 
#include<readline/history.h> 

// Clearing the shell using escape sequences 
#define clear() printf("\033[H\033[J") 
#define MAXCOM 1000 // max number of letters to be supported 
#define MAXLIST 100 // max number of commands to be supported 

// declare needed global variables
int input_redir =0 , output_redir=0 , pipe_flag =0 , out_redir_cnt =0 ,in_redir_cnt=0 , pipe_cnt=0;
char* input_file=NULL;
char* output_file=NULL;


// Function to take input 
int takeInput(char* str) 
{ 
	char* buf; 

	buf = readline("\n>>> "); 
	if (strlen(buf) != 0) { 
		add_history(buf); 
		strcpy(str, buf); 
		return 0; 
	} else { 
		return 1; 
	} 
}
// function for parsing command words 
void parseSpace(char* str, char* parsed[]) 
{ 
	int i; 

	for (i = 0; i < MAXLIST; i++) { 
		parsed[i] = strsep(&str, " "); 
		if (parsed[i] == NULL) 
			break; 
		if (strlen(parsed[i]) == 0) 
			i--; 	
	} 

}  

// Function to print Current Directory. 
void printDir() 
{ 
	char cwd[1024]; 
	getcwd(cwd, sizeof(cwd)); 
	printf("\nDir: %s", cwd); 
} 

// indicate position of >,<
int redir_pos(char* temp[])
{
  int i=0;
  while(temp[i]!=NULL)
  {
    if(strcmp(temp[i],">")==0)
    {
       output_file=temp[i+1];
       output_redir=1;
       return i ;
    }
    if(strcmp(temp[i],"<")==0)
    {
       input_file =temp[i+1]; 
       input_redir=1; 
       return i ;
    }
    i=i+1;
  }
  return i ;
}
// function to check if there is multi level of piping or redirection
void check (char* temp[])
{
   int i=0;
  while(temp[i]!=NULL)
  {
    if(strcmp(temp[i],">")==0)
    {
       out_redir_cnt++;
    }
    if(strcmp(temp[i],"<")==0)
    {
       in_redir_cnt++;
    }
    if(strcmp(temp[i],"|")==0)
    {
       pipe_cnt++;
    }
    i=i+1;
  } 
   int total = out_redir_cnt + in_redir_cnt + pipe_cnt;
   if(total > 1)
   {
      printf("%s","can't handel multiply level of pipe or redirectio.");
      temp[0]=NULL;
   }
}

// function to divide command in redirection  
void processLines (char* parsedArgs[], char* inputString) 
{
   int i =0 , pos=0;
   char* temp[MAXLIST];  
   parseSpace(inputString,temp);
   check(temp);
   pos=redir_pos(temp);
   
   while(i<pos)
   {
    parsedArgs[i]=temp[i];
    i=i+1;
   }
}
// Function where the system command is executed 
void execArgs(char * inputString) 
{ 
	// Forking a child
	char* parsed[MAXCOM];
	processLines (parsed,inputString); 
	pid_t pid = fork(); 
	if (pid == -1) { 
		printf("\nFailed forking child.."); 
		return; 
	} else if (pid == 0) { 
	        if (input_redir==1&&input_file!=NULL)
		      dup2(open(input_file,O_RDWR|O_CREAT,0777),0);
		if (output_redir==1&&output_file!=NULL)
		      dup2(open(output_file,O_RDWR|O_CREAT,0777),1);
		if (execvp(parsed[0], parsed) < 0) { 
			printf("\nCould not execute command.."); 
		} 
		exit(0); 
	} else { 
		// waiting for child to terminate 
		wait(NULL); 
		output_file=NULL;
		input_file=NULL;
		input_redir=0;
		output_redir=0;
		out_redir_cnt =0 ;
		in_redir_cnt=0 ;
		return; }} 

// Function where the piped system commands is executed 
void execArgsPiped(char** parsed, char** parsedpipe) 
{ 
	// 0 is read end, 1 is write end 
	int pipefd[2]; 
	pid_t p1, p2; 
        
	if (pipe(pipefd) < 0) { 
		printf("\nPipe could not be initialized"); 
		return; 
	} 
	p1 = fork(); 
	if (p1 < 0) { 
		printf("\nCould not fork"); 
		return; 
	} 

	if (p1 == 0) { 
		// Child 1 executing.. 
		// It only needs to write at the write end 
		close(pipefd[0]); 
		dup2(pipefd[1], STDOUT_FILENO); 
		close(pipefd[1]); 

		if (execvp(parsed[0], parsed) < 0) { 
			printf("\nCould not execute command 1.."); 
			exit(0); 
		} 
		printf("%i 1 %i \n",pipefd[0],pipefd[1]); 
	} else { 
		// Parent executing 
		p2 = fork(); 

		if (p2 < 0) { 
			printf("\nCould not fork"); 
			return; 
		} 

		// Child 2 executing.. 
		// It only needs to read at the read end 
		if (p2 == 0) { 
			close(pipefd[1]); 
			dup2(pipefd[0], STDIN_FILENO); 
			close(pipefd[0]); 
			if (execvp(parsedpipe[0], parsedpipe) < 0) { 
				printf("\nCould not execute command 2.."); 
				exit(0); }} else { 
			// parent executing, waiting for two children 
			wait(NULL); 
			wait(NULL); }}} 

// Help command builtin 
void openHelp() 
{ 
	puts("\n***WELCOME TO MY SHELL HELP***"
		"\nList of Commands supported:"
		"\n>cd"
		"\n>ls"
		"\n>exit"
		"\n>cat"
		"\n>head"
		"\n>wc"
		"\n>all other general commands available in UNIX shell"
		); 

	return; 
} 

// Function to execute builtin commands 
int ownCmdHandler(char** parsed) 
{ 
	int NoOfOwnCmds = 3, i, switchOwnArg = 0; 
	char* ListOfOwnCmds[NoOfOwnCmds]; 
	char* username; 

	ListOfOwnCmds[0] = "exit"; 
	ListOfOwnCmds[1] = "cd"; 
	ListOfOwnCmds[2] = "help"; 

	for (i = 0; i < NoOfOwnCmds; i++) { 
		if (strcmp(parsed[0], ListOfOwnCmds[i]) == 0) { 
			switchOwnArg = i + 1; 
			break; 
		} 
	} 

	switch (switchOwnArg) { 
	case 1: 
		printf("\nGoodbye\n"); 
		exit(0); 
	case 2: 
		chdir(parsed[1]); 
		return 1; 
	case 3: 
		openHelp(); 
		return 1; 
	default: 
		break; 
	} 

	return 0; 
} 

// function for finding pipe 
int parsePipe(char* str, char** strpiped) 
{ 
	int i; 
	for (i = 0; i < 2; i++) { 
		strpiped[i] = strsep(&str, "|"); 
		if (strpiped[i] == NULL) 
			break; 
	} 

	if (strpiped[1] == NULL) 
		return 0; // returns zero if no pipe is found. 
	else { 
		return 1; 
	} 
} 

// function to handle pipe instruction
int processString(char* str, char** parsed, char** parsedpipe) 
{ 

	char* strpiped[2]; 
	int piped = 0; 

	piped = parsePipe(str, strpiped); 

	if (piped) { 
		parseSpace(strpiped[0], parsed); 
		parseSpace(strpiped[1], parsedpipe); 

	} else { 

		parseSpace(str, parsed); 
	} 

	if (ownCmdHandler(parsed)) 
		return 0; 
	else
		return 1 + piped; 
} 


int main() 
{ 
	char inputString[MAXCOM], *parsedArgs[MAXLIST]; 
	char* parsedArgsPiped[MAXLIST]; 
	int execFlag = 0;  
	while (1) { 
		// print shell line 
		printDir(); 
		// take input 
		if (takeInput(inputString)) 
			continue;
	        char inputString1[MAXCOM];
	        strcpy(inputString1,inputString);
		// process 
		execFlag = processString(inputString, 
		parsedArgs, parsedArgsPiped); 
		// execute 
		if (execFlag == 1) 
			execArgs(inputString1); 

		if (execFlag == 2) 
			execArgsPiped(parsedArgs, parsedArgsPiped);} 
	return 0;} 
